version: "3.9"

services:
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://kafka:9093'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network

    
    postgres:
      image: postgres:15
      container_name: postgres
      env_file: ./.env
      ports:
        - "${POSTGRES_PORT}:5432"
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks:
        - app-network
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 10s
        timeout: 5s
        retries: 5
    
    arxiv_spider:
      build:
        context: ./webscraper
      container_name: arxiv_spider
      command: ["sh", "scripts/run_arxiv.sh"]

    github_spider:
      build:
        context: ./webscraper
      container_name: github_spider
      command: ["sh", "scripts/run_github.sh"]
    
    medium_spider:
      build: 
        context: ./webscraper
      container_name: medium_spider
      command: ["sh", "scripts/run_medium.sh"]

    postgres_consumer:
      build:
        context: ./pipeline
      container_name: postgres_consumer
      command: ["python", "postgres_consumer.py"]

    neo4j_consumer:
      build:
        context: ./pipeline
      container_name: neo4j_consumer
      command: ["python", "neo4j_consumer.py"]

    weaviate_consumer:
      build:
        context: ./pipeline
      container_name: weaviate_consumer
      command: ["python", "weaviate_consumer.py"]
